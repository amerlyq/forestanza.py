#!/usr/bin/env python3

from collections import Iterable

from forestanza import __appname__
from forestanza.common import dict_resolve, dict_flatten, getcolumn
from forestanza import io


class ParseError(Exception):
    """Base class for this program exceptions."""
    pass

class ForestanzaDOM:
    def __init__(self, lang):
        clrs = io.import_yaml('colorscheme')
        lexs = io.import_yaml('lexems-' + lang)
        self.clr = {}
        self.dom = list(self.process(clrs, lexs))

    def process(self, clrs, lexs):
        for chain, words in dict_flatten(lexs):
            cchn, cval = dict_resolve(clrs, chain)
            grp = ''.join(cchn)
            if grp not in self.clr:
                self.clr[grp] = cval if isinstance(cval, list) else [cval]
            yield (chain, grp, getcolumn(words, 0), getcolumn(words, 1))

class VimSynGen:
    CLROPTS = ['ctermfg', 'guifg', 'ctermbg', 'guibg']
    SYNFMT = "syn match fza_{:s} display '\\v\\c{:s}'\n"

    def make_from(dom, idx):
        for entry in dom.dom:
            rgx = '|'.join(entry[idx])
            if rgx:
                yield (VimSynGen.SYNFMT.format(entry[1], rgx))

    def colors(dom):
        for grp, clr in sorted(dom.clr.items()):
            higlt = "hi def fza_{:s}".format(grp)
            for i, v in enumerate(clr):
                higlt += ' {:s}={:s}'.format(VimSynGen.CLROPTS[i], str(v))
            yield higlt + "\n"


# NOTE additional fields in word is not supposed to be included into syntax
# highlighting, but can be used for generating popups in some markups.
if __name__ == '__main__':
    dom = ForestanzaDOM('jap')
    io.export_cache('origin', VimSynGen.make_from(dom, 2))
    io.export_cache('phonetic', VimSynGen.make_from(dom, 3))
    io.export_cache('colors', VimSynGen.colors(dom))
