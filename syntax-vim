#!/usr/bin/env python3

from forestanza.common import dict_resolve, dict_flatten, getcolumn


class ForestanzaDOM:
    def __init__(self, clrs, lexs):
        self._clrs = clrs
        self._lexs = lexs
        self.clr = {}

    def data(self):
        for chain, words in dict_flatten(self._lexs):
            cchn, cval = dict_resolve(self._clrs, chain)
            grp = ''.join(cchn)
            if grp not in self.clr:
                self.clr[grp] = cval if isinstance(cval, list) else [cval]
            yield (chain, grp, getcolumn(words, 0), getcolumn(words, 1))

    def colors(self):
        return self.clr.items()


class VimSynGen:
    SYNFMT = "syn match fza_{:s} display '\\v\\c{:s}'\n"
    HLFMT = "hi def fza_{:s} {:s}\n"
    COPTS = ['ctermfg', 'guifg', 'ctermbg', 'guibg']

    def __init__(self, dom):
        self._dom = dom
        self.origin = self.make_from(2)
        self.phonet = self.make_from(3)
        self.colors = self.colors()

    def make_from(self, idx):
        for entry in self._dom.data():
            rgx = '|'.join(entry[idx])
            if rgx:
                yield (VimSynGen.SYNFMT.format(entry[1], rgx))

    def colors(self):
        for grp, clr in sorted(self._dom.colors()):
            opts = ['{:s}={!s:s}'.format(*L) for L in zip(VimSynGen.COPTS, clr)]
            yield VimSynGen.HLFMT.format(grp, ' '.join(opts))


# NOTE additional fields in word is not supposed to be included into syntax
# highlighting, but can be used for generating popups in some markups.
if __name__ == '__main__':
    from forestanza import io
    dom = ForestanzaDOM(io.import_yaml('colorscheme'), io.import_yaml('lexems-' + 'jap'))
    synvim = VimSynGen(dom)
    io.export_cache('origin', synvim.origin)
    io.export_cache('phonetic', synvim.phonet)
    io.export_cache('colors', synvim.colors)
